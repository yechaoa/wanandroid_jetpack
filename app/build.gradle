apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dependencies-plugin'

def keystorePropertiesFile = rootProject.file("./jks/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdk 34
    namespace Configs.applicationId

    defaultConfig {
        applicationId Configs.applicationId
        minSdkVersion Configs.minSdk
        targetSdkVersion Configs.target
        versionCode Configs.versionCode
        versionName Configs.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }

        resConfigs("en", "zh", "zh-rCN")

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            // 还可以添加 'armeabi','x86', 'x86_64', 'mips', 'mips64'
        }
    }

    buildFeatures {
        viewBinding = true
        // dataBinding = true
        buildConfig = true
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${variant.name}-${variant.versionName}-${variant.versionCode}-${releaseTime()}.apk"
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            buildConfigField("String", "AUTHOR", "\"yechaoa\"")
            minifyEnabled false
        }
        release {
            buildConfigField("String", "AUTHOR", "\"yechaoa\"")
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

static def releaseTime() {
    return new Date().format("MMdd_HHmm", TimeZone.default)
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation(Deps.kotlinStdlib)
    implementation(Deps.coreKtx)
    implementation(Deps.appcompat)
    implementation(Deps.material)
    implementation(Deps.constraintlayout)
    implementation(Deps.navigationFragment)
    implementation(Deps.navigationUi)
    implementation(Deps.lifecycle)
    implementation(Deps.navigationFragmentKtx)
    implementation(Deps.navigationUiKtx)

    testImplementation(Deps.junit)
    androidTestImplementation(Deps.junitExt)
    androidTestImplementation(Deps.espressoCore)

    /*okhttp、retrofit*/
    implementation(Deps.okhttp)
    implementation(Deps.retrofit)
    implementation(Deps.converterGson)
    implementation(Deps.logging)

    /*banner*/
    implementation(Deps.banner)

    /*swiperefreshlayout*/
    implementation(Deps.swiperefreshlayout)

    /*immersionbar*/
    implementation(Deps.immersionbar)

    /*agentWeb*/
    implementation(Deps.agentweb)

    /*YUtils*/
    implementation(Deps.yutilskt)

    /*BRVAH*/
    implementation(Deps.brvha)

    /*glide*/
    implementation(Deps.glide)
    kapt(Deps.glideCompiler)

    /*FlowLayout*/
    implementation(Deps.flowlayout)

    /*VerticalTabLayout*/
    implementation(Deps.VerticalTabLayout)

    /*room*/
    implementation(Deps.roomRuntime)
    kapt(Deps.roomCompiler)
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation(Deps.roomKtx)
    // optional - Test helpers
    testImplementation(Deps.roomTesting)

    implementation project(':lintLibrary')

}